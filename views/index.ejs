<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <title>Job Portal</title>
    <style>
        *{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .main {
  max-width: 800px;
  margin: 2rem auto;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  background-color: #ffffff;
}

.main h1 {
  text-align: center;
  font-size: 2rem;
  font-weight: bold;
  color: #333333;
  margin-bottom: 1rem;
}

form#jobForm {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 2rem;
}

form#jobForm h3 {
  font-size: 1.2rem;
  font-weight: 500;
  color: #555555;
  text-align: center;
  margin-bottom: 1rem;
}

form#jobForm input {
  padding: 0.8rem;
  font-size: 1rem;
  border: 1px solid #cccccc;
  border-radius: 4px;
}

form#jobForm input:focus {
  border-color: #007bff;
  outline: none;
  box-shadow: 0 0 4px rgba(0, 123, 255, 0.5);
}

form#jobForm button {
  padding: 0.8rem;
  font-size: 1rem;
  font-weight: bold;
  color: #ffffff;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

form#jobForm button:hover {
  background-color: #0056b3;
}

.job-list {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1rem;
}

@media (min-width: 768px) {
  .job-list {
    grid-template-columns: 1fr 1fr;
  }
}

@media (min-width: 1024px) {
  .job-list {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

.job-list .job-card {
  padding: 1rem;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  background-color: #ffffff;
  transition: transform 0.3s, box-shadow 0.3s;
}

.job-list .job-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.job-list .job-card h3 {
  font-size: 1.2rem;
  font-weight: bold;
  color: #333333;
  margin-bottom: 0.5rem;
}

.job-list .job-card p {
  font-size: 1rem;
  color: #555555;
  margin-bottom: 0.5rem;
}

.job-list .job-card h5 {
  font-size: 0.9rem;
  color: #777777;
}

.job-list .job-card .buttons {
  display: flex;
  gap: 0.5rem;
  margin-top: 1rem;
}

.job-list .job-card .buttons button {
  padding: 0.6rem;
  font-size: 0.9rem;
  font-weight: bold;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.job-list .job-card .buttons .delete-btn {
  background-color: #ff4d4d;
  color: #ffffff;
}

.job-list .job-card .buttons .delete-btn:hover {
  background-color: #cc0000;
}

.job-list .job-card .buttons .update-btn {
  background-color: #007bff;
  color: #ffffff;
}

.job-list .job-card .buttons .update-btn:hover {
  background-color: #0056b3;
}
        
        </style>
</head>
<body>
    
    
    <!-- Form to create a new job -->
    
    <!-- To add data router -->  
    
    
    
    <div class="main">
        <h1>Job Portal</h1>
        <form id="jobForm">
           <h3>You can create job here ..</h3>
           <input type="text" id="jobTitle" placeholder="Job Title" required /><br>
           <input type="text" id="jobCompany" placeholder="Company Name" required /><br>
           <input type="text" id="jobDescription" placeholder="Job Description" required /><br>
           <input type="text" id="jobLocation" placeholder="Job Location" required /><br>
           <button type="submit">Create Job</button>
       </form>
   
       <div id="jobList" class="job-list">
        <!-- job list card will be display here .. -->
       </div>
    </div>
    
    <script>
        // Fetch and display all jobs
        const fetchJobs = async () => {
            try {
                const jobListParent = document.getElementById('jobList');
                jobListParent.innerHTML = ""; // Clear previous jobs
                const jobList = await fetch('http://localhost:4000/api/jobs');
                for (const singleJob of await jobList.json()) {
                    const singleJobDiv = document.createElement('div');
                    singleJobDiv.classList.add('single-job-data');

                    const title = document.createElement('h3');
                    title.innerText = ` ${singleJob.title} (${singleJob.company})`;

                    const description = document.createElement('p');
                    description.innerText = ` ${singleJob.description}`;

                    const location = document.createElement('h5');
                    location.innerText = ` ${singleJob.location}`;

                    const deleteButton = document.createElement('button');
                    deleteButton.innerText = 'Delete';
                    deleteButton.onclick = () => deleteJob(singleJob._id);

                    const updateButton = document.createElement('button');
                    updateButton.innerText = 'Update';
                    updateButton.onclick = () => updateJob(singleJob._id, singleJob);

                    singleJobDiv.appendChild(title);
                    singleJobDiv.appendChild(description);
                    singleJobDiv.appendChild(location);
                    singleJobDiv.appendChild(deleteButton);
                    singleJobDiv.appendChild(updateButton);
                    jobListParent.appendChild(singleJobDiv);
                }
            } catch (e) {
                console.log(e);
                alert("Something went wrong, please try again later!");
            }
        };

        // Delete a job
        const deleteJob = async (jobId) => {
            try {
                await fetch(`http://localhost:4000/api/jobs/${jobId}`, { method: 'DELETE' });
                fetchJobs();
            } catch (e) {
                console.log(e);
                alert("Something went wrong, please try again later!");
            }
        };

        // Create a job
        const createJob = async (jobData) => {
            try {
                await fetch('http://localhost:4000/api/jobs', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(jobData)
                });
                fetchJobs();
            } catch (e) {
                console.log(e);
                alert("Something went wrong, please try again later!");
            }
        };

        // Update a job
        const updateJob = async (jobId, currentJobData) => {
            const newTitle = prompt("Enter new title:", currentJobData.title) || currentJobData.title;
            const newCompany = prompt("Enter new company:", currentJobData.company) || currentJobData.company;
            const newDescription = prompt("Enter new description:", currentJobData.description) || currentJobData.description;
            const newLocation = prompt("Enter new location:", currentJobData.location) || currentJobData.location;

            try {
                await fetch(`http://localhost:4000/api/jobs/${jobId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        title: newTitle,
                        company: newCompany,
                        description: newDescription,
                        location: newLocation
                    })
                });
                fetchJobs();
            } catch (e) {
                console.log(e);
                alert("Something went wrong, please try again later!");
            }
        };

        // Handle form submission
    var myform =  document.getElementById('jobForm')
    myform.addEventListener('submit', (e) => {
            e.preventDefault();
            const jobData = {
                title: document.getElementById('jobTitle').value,
                company: document.getElementById('jobCompany').value,
                description: document.getElementById('jobDescription').value,
                location: document.getElementById('jobLocation').value,
            };
            createJob(jobData);
            myform.reset();
        });

        // Initial fetch of jobs
        fetchJobs();
    </script>
</body>
</html>
















